package bls_tss

import (
	"testing"

	"github.com/herumi/bls-eth-go-binary/bls"
)

func itorSigners(arr []string, k int) [][]string {
	var helper func(start int, combo []string)
	res := [][]string{}
	combo := []string{}

	helper = func(start int, combo []string) {
		if len(combo) == k {
			// Make a copy of combo since combo will be reused
			c := make([]string, len(combo))
			copy(c, combo)
			res = append(res, c)
			return
		}
		for i := start; i <= len(arr)-(k-len(combo)); i++ {
			// Add current element
			combo = append(combo, arr[i])
			// Move to the next element
			helper(i+1, combo)
			// Backtrack to try next candidate
			combo = combo[:len(combo)-1]
		}
	}

	helper(0, combo)
	return res
}

func TestSign(t *testing.T) {
	allId := []string{"1", "2", "3", "4", "5"}

	oirgVal := []byte("dfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasfdfasfasdfasf")
	verifyVal := oirgVal

	grp, err := NewSignerGroup(4, allId...)

	if err != nil {
		t.Error(err)
	}

	sig, err := grp.Sign(oirgVal)
	if err != nil {
		t.Error(err)
	}

	s := sig.Serialize()
	dsig := &bls.Sign{}
	dsig.Deserialize(s)

	comb := itorSigners(allId, 4)
	for _, c := range comb {
		sub, err := grp.PickUpSigners(c...)
		if err != nil {
			t.Error(err)
		}

		if !sub.Verify(dsig, verifyVal) {
			t.Error("Signature verification failed")
		}
	}
}
