{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/account/v1/bind": {
            "post": {
                "description": "bind a account to community node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "parameters": [
                    {
                        "description": "Account Binding",
                        "name": "bind",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Bind"
                        }
                    },
                    {
                        "type": "string",
                        "description": "apiKey",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/account/v1/sign": {
            "post": {
                "description": "sign a account to community node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/account/v1/transfer": {
            "post": {
                "description": "transfer a TX",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "parameters": [
                    {
                        "description": "Transfer TX",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Transfer"
                        }
                    },
                    {
                        "type": "string",
                        "description": "apiKey",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/dashboard/v1/node": {
            "get": {
                "description": "get node members",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/healthz": {
            "get": {
                "description": "Get Healthz",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Healthz"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/account/chain": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "create aa by sepcify network(chain)",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Create AA with Alias, default empty",
                "parameters": [
                    {
                        "description": "Create AA",
                        "name": "createAABody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.CreateAARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/account/info": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "get user account info: eoa address, aa address, init code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Get User Account Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "network",
                        "name": "network",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "alias",
                        "name": "alias",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/seedworks.AccountInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/chains/support": {
            "get": {
                "description": "get support chains",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Get support chains in relay party",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/imauthz": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "a demo api to show api is authorized after signin",
                "tags": [
                    "Demo"
                ],
                "responses": {
                    "200": {
                        "description": "user is authorized",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/reg": {
            "post": {
                "description": "Send challenge for passkey",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Begin SignUp",
                "parameters": [
                    {
                        "description": "Begin Registration",
                        "name": "registrationBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.RegistrationByEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialCreationOptions"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/reg/prepare": {
            "post": {
                "description": "Send captcha to email for confirming ownership",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Prepare SignUp",
                "parameters": [
                    {
                        "description": "Send Captcha to Email",
                        "name": "registrationBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.RegistrationByEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/reg/verify": {
            "post": {
                "description": "Verify attestations, register user and return JWT",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Finish SignUp By Email",
                "parameters": [
                    {
                        "type": "string",
                        "format": "email",
                        "description": "user email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "origin",
                        "name": "origin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "network",
                        "name": "network",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "network",
                        "name": "alias",
                        "in": "query"
                    },
                    {
                        "description": "Verify Registration",
                        "name": "registrationBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/protocol.CredentialCreationResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plugin_passkey_relay_party.SiginInResponse"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/sign": {
            "post": {
                "description": "Send challenge for passkey",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Begins SignIn",
                "parameters": [
                    {
                        "description": "Sign in details",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.SiginIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialRequestOptions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/sign/verify": {
            "post": {
                "description": "Verify attestations and return JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Finish SingIn",
                "parameters": [
                    {
                        "type": "string",
                        "description": "origin",
                        "name": "origin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Verify SignIn",
                        "name": "signinBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/protocol.CredentialAssertionResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plugin_passkey_relay_party.SiginInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/tx/sign": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Send challenge for passkey",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Begin tx signature",
                "parameters": [
                    {
                        "description": "send challenge to passkey for tx sign",
                        "name": "dataSignature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.TxSignature"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/protocol.PublicKeyCredentialRequestOptions"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/tx/sign/verify": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Verify attestations and signature txdata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "Finish Tx Signature",
                "parameters": [
                    {
                        "description": "Verify SignIn",
                        "name": "paymentSign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/protocol.CredentialAssertionResponse"
                        }
                    },
                    {
                        "type": "string",
                        "description": "origin",
                        "name": "origin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ticket",
                        "name": "ticket",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/seedworks.TxSignatureResult"
                        }
                    }
                }
            }
        },
        "/api/v1/airaccount_rpc/{network}": {
            "post": {
                "description": "AirAccount JSON-RPC API",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "JsonRpcHandle"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Network",
                        "name": "network",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JsonRpcRequest Model",
                        "name": "rpcRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.JsonRpcRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "apiKey",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "pkg.JsonRpcRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "jsonrpc": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "plugin_passkey_relay_party.SiginInResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "expire": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "protocol.AttestationFormat": {
            "type": "string",
            "enum": [
                "packed",
                "tpm",
                "android-key",
                "android-safetynet",
                "fido-u2f",
                "apple",
                "none"
            ],
            "x-enum-varnames": [
                "AttestationFormatPacked",
                "AttestationFormatTPM",
                "AttestationFormatAndroidKey",
                "AttestationFormatAndroidSafetyNet",
                "AttestationFormatFIDOUniversalSecondFactor",
                "AttestationFormatApple",
                "AttestationFormatNone"
            ]
        },
        "protocol.AuthenticationExtensions": {
            "type": "object",
            "additionalProperties": {}
        },
        "protocol.AuthenticationExtensionsClientOutputs": {
            "type": "object",
            "additionalProperties": {}
        },
        "protocol.AuthenticatorAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clientDataJSON": {
                    "description": "From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson\nThis attribute contains a JSON serialization of the client data passed to the authenticator\nby the client in its call to either create() or get().",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userHandle": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "protocol.AuthenticatorAttachment": {
            "type": "string",
            "enum": [
                "platform",
                "cross-platform"
            ],
            "x-enum-varnames": [
                "Platform",
                "CrossPlatform"
            ]
        },
        "protocol.AuthenticatorAttestationResponse": {
            "type": "object",
            "properties": {
                "attestationObject": {
                    "description": "AttestationObject is the byte slice version of attestationObject.\nThis attribute contains an attestation object, which is opaque to, and\ncryptographically protected against tampering by, the client. The\nattestation object contains both authenticator data and an attestation\nstatement. The former contains the AAGUID, a unique credential ID, and\nthe credential public key. The contents of the attestation statement are\ndetermined by the attestation statement format used by the authenticator.\nIt also contains any additional information that the Relying Party's server\nrequires to validate the attestation statement, as well as to decode and\nvalidate the authenticator data along with the JSON-serialized client data.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "authenticatorData": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clientDataJSON": {
                    "description": "From the spec https://www.w3.org/TR/webauthn/#dom-authenticatorresponse-clientdatajson\nThis attribute contains a JSON serialization of the client data passed to the authenticator\nby the client in its call to either create() or get().",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "publicKey": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "publicKeyAlgorithm": {
                    "type": "integer"
                },
                "transports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "protocol.AuthenticatorSelection": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "description": "AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only\nauthenticators attached with the specified AuthenticatorAttachment enum.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.AuthenticatorAttachment"
                        }
                    ]
                },
                "requireResidentKey": {
                    "description": "RequireResidentKey this member describes the Relying Party's requirements regarding resident\ncredentials. If the parameter is set to true, the authenticator MUST create a client-side-resident\npublic key credential source when creating a public key credential.",
                    "type": "boolean"
                },
                "residentKey": {
                    "description": "ResidentKey this member describes the Relying Party's requirements regarding resident\ncredentials per Webauthn Level 2.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.ResidentKeyRequirement"
                        }
                    ]
                },
                "userVerification": {
                    "description": "UserVerification This member describes the Relying Party's requirements regarding user verification for\nthe create() operation. Eligible authenticators are filtered to only those capable of satisfying this\nrequirement.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.UserVerificationRequirement"
                        }
                    ]
                }
            }
        },
        "protocol.AuthenticatorTransport": {
            "type": "string",
            "enum": [
                "usb",
                "nfc",
                "ble",
                "smart-card",
                "hybrid",
                "internal"
            ],
            "x-enum-varnames": [
                "USB",
                "NFC",
                "BLE",
                "SmartCard",
                "Hybrid",
                "Internal"
            ]
        },
        "protocol.ConveyancePreference": {
            "type": "string",
            "enum": [
                "none",
                "indirect",
                "direct",
                "enterprise"
            ],
            "x-enum-varnames": [
                "PreferNoAttestation",
                "PreferIndirectAttestation",
                "PreferDirectAttestation",
                "PreferEnterpriseAttestation"
            ]
        },
        "protocol.CredentialAssertionResponse": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "type": "string"
                },
                "clientExtensionResults": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensionsClientOutputs"
                },
                "id": {
                    "description": "ID is The credential’s identifier. The requirements for the\nidentifier are distinct for each type of credential. It might\nrepresent a username for username/password tuples, for example.",
                    "type": "string"
                },
                "rawId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "$ref": "#/definitions/protocol.AuthenticatorAssertionResponse"
                },
                "type": {
                    "description": "Type is the value of the object’s interface object's [[type]] slot,\nwhich specifies the credential type represented by this object.\nThis should be type \"public-key\" for Webauthn credentials.",
                    "type": "string"
                }
            }
        },
        "protocol.CredentialCreationResponse": {
            "type": "object",
            "properties": {
                "authenticatorAttachment": {
                    "type": "string"
                },
                "clientExtensionResults": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensionsClientOutputs"
                },
                "id": {
                    "description": "ID is The credential’s identifier. The requirements for the\nidentifier are distinct for each type of credential. It might\nrepresent a username for username/password tuples, for example.",
                    "type": "string"
                },
                "rawId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "$ref": "#/definitions/protocol.AuthenticatorAttestationResponse"
                },
                "type": {
                    "description": "Type is the value of the object’s interface object's [[type]] slot,\nwhich specifies the credential type represented by this object.\nThis should be type \"public-key\" for Webauthn credentials.",
                    "type": "string"
                }
            }
        },
        "protocol.CredentialDescriptor": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "CredentialID The ID of a credential to allow/disallow.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "transports": {
                    "description": "The authenticator transports that can be used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.AuthenticatorTransport"
                    }
                },
                "type": {
                    "description": "The valid credential types.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol.CredentialType"
                        }
                    ]
                }
            }
        },
        "protocol.CredentialParameter": {
            "type": "object",
            "properties": {
                "alg": {
                    "$ref": "#/definitions/webauthncose.COSEAlgorithmIdentifier"
                },
                "type": {
                    "$ref": "#/definitions/protocol.CredentialType"
                }
            }
        },
        "protocol.CredentialType": {
            "type": "string",
            "enum": [
                "public-key"
            ],
            "x-enum-varnames": [
                "PublicKeyCredentialType"
            ]
        },
        "protocol.PublicKeyCredentialCreationOptions": {
            "type": "object",
            "properties": {
                "attestation": {
                    "$ref": "#/definitions/protocol.ConveyancePreference"
                },
                "attestationFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.AttestationFormat"
                    }
                },
                "authenticatorSelection": {
                    "$ref": "#/definitions/protocol.AuthenticatorSelection"
                },
                "challenge": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "excludeCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialDescriptor"
                    }
                },
                "extensions": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensions"
                },
                "hints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.PublicKeyCredentialHints"
                    }
                },
                "pubKeyCredParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialParameter"
                    }
                },
                "rp": {
                    "$ref": "#/definitions/protocol.RelyingPartyEntity"
                },
                "timeout": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/protocol.UserEntity"
                }
            }
        },
        "protocol.PublicKeyCredentialHints": {
            "type": "string",
            "enum": [
                "security-key",
                "client-device",
                "hybrid"
            ],
            "x-enum-varnames": [
                "PublicKeyCredentialHintSecurityKey",
                "PublicKeyCredentialHintClientDevice",
                "PublicKeyCredentialHintHybrid"
            ]
        },
        "protocol.PublicKeyCredentialRequestOptions": {
            "type": "object",
            "properties": {
                "allowCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.CredentialDescriptor"
                    }
                },
                "challenge": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "extensions": {
                    "$ref": "#/definitions/protocol.AuthenticationExtensions"
                },
                "hints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protocol.PublicKeyCredentialHints"
                    }
                },
                "rpId": {
                    "type": "string"
                },
                "timeout": {
                    "type": "integer"
                },
                "userVerification": {
                    "$ref": "#/definitions/protocol.UserVerificationRequirement"
                }
            }
        },
        "protocol.RelyingPartyEntity": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "A unique identifier for the Relying Party entity, which sets the RP ID.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:\n\nWhen inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,\nintended only for display. For example, \"ACME Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n\nWhen inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is\nintended only for display, i.e., aiding the user in determining the difference between user accounts with similar\ndisplayNames. For example, \"alexm\", \"alex.p.mueller@example.com\" or \"+14255551234\".",
                    "type": "string"
                }
            }
        },
        "protocol.ResidentKeyRequirement": {
            "type": "string",
            "enum": [
                "discouraged",
                "preferred",
                "required"
            ],
            "x-enum-varnames": [
                "ResidentKeyRequirementDiscouraged",
                "ResidentKeyRequirementPreferred",
                "ResidentKeyRequirementRequired"
            ]
        },
        "protocol.UserEntity": {
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "A human-palatable name for the user account, intended only for display.\nFor example, \"Alex P. Müller\" or \"田中 倫\". The Relying Party SHOULD let\nthe user choose this, and SHOULD NOT restrict the choice more than necessary.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the user handle of the user account entity. To ensure secure operation,\nauthentication and authorization decisions MUST be made on the basis of this id\nmember, not the displayName nor name members. See Section 6.1 of\n[RFC8266](https://www.w3.org/TR/webauthn/#biblio-rfc8266)."
                },
                "name": {
                    "description": "A human-palatable name for the entity. Its function depends on what the PublicKeyCredentialEntity represents:\n\nWhen inherited by PublicKeyCredentialRpEntity it is a human-palatable identifier for the Relying Party,\nintended only for display. For example, \"ACME Corporation\", \"Wonderful Widgets, Inc.\" or \"ОАО Примертех\".\n\nWhen inherited by PublicKeyCredentialUserEntity, it is a human-palatable identifier for a user account. It is\nintended only for display, i.e., aiding the user in determining the difference between user accounts with similar\ndisplayNames. For example, \"alexm\", \"alex.p.mueller@example.com\" or \"+14255551234\".",
                    "type": "string"
                }
            }
        },
        "protocol.UserVerificationRequirement": {
            "type": "string",
            "enum": [
                "required",
                "preferred",
                "discouraged"
            ],
            "x-enum-comments": {
                "VerificationPreferred": "This is the default"
            },
            "x-enum-varnames": [
                "VerificationRequired",
                "VerificationPreferred",
                "VerificationDiscouraged"
            ]
        },
        "request.Bind": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "request.Transfer": {
            "type": "object"
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/response.Result"
                }
            }
        },
        "response.Result": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "cost": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "seedworks.AccountInfo": {
            "type": "object",
            "properties": {
                "aa": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "eoa": {
                    "type": "string"
                },
                "init_code": {
                    "type": "string"
                }
            }
        },
        "seedworks.Chain": {
            "type": "string",
            "enum": [
                "ethereum-mainnet",
                "ethereum-sepolia",
                "optimism-mainnet",
                "optimism-sepolia",
                "arbitrum-one",
                "arbitrum-nova",
                "arbitrum-sepolia",
                "scroll-mainnet",
                "scroll-sepolia",
                "starknet-mainnet",
                "starknet-sepolia",
                "base-mainnet",
                "base-sepolia"
            ],
            "x-enum-varnames": [
                "EthereumMainnet",
                "EthereumSepolia",
                "OptimismMainnet",
                "OptimismSepolia",
                "ArbitrumOne",
                "ArbitrumNova",
                "ArbitrumSpeolia",
                "ScrollMainnet",
                "ScrollSepolia",
                "StarketMainnet",
                "StarketSepolia",
                "BaseMainnet",
                "BaseSepolia"
            ]
        },
        "seedworks.CreateAARequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "network": {
                    "$ref": "#/definitions/seedworks.Chain"
                }
            }
        },
        "seedworks.RegistrationByEmail": {
            "type": "object",
            "properties": {
                "captcha": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                }
            }
        },
        "seedworks.SiginIn": {
            "type": "object",
            "properties": {
                "origin": {
                    "type": "string"
                }
            }
        },
        "seedworks.TxSignature": {
            "type": "object",
            "properties": {
                "origin": {
                    "type": "string"
                },
                "ticket": {
                    "type": "string"
                },
                "txdata": {
                    "type": "string"
                }
            }
        },
        "seedworks.TxSignatureResult": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "code": {
                    "type": "integer"
                },
                "sign": {
                    "type": "string"
                },
                "txdata": {
                    "type": "string"
                }
            }
        },
        "webauthncose.COSEAlgorithmIdentifier": {
            "type": "integer",
            "enum": [
                -7,
                -35,
                -36,
                -65535,
                -257,
                -258,
                -259,
                -37,
                -38,
                -39,
                -8,
                -47
            ],
            "x-enum-varnames": [
                "AlgES256",
                "AlgES384",
                "AlgES512",
                "AlgRS1",
                "AlgRS256",
                "AlgRS384",
                "AlgRS512",
                "AlgPS256",
                "AlgPS384",
                "AlgPS512",
                "AlgEdDSA",
                "AlgES256K"
            ]
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}