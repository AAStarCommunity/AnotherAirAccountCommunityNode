// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "AAStar Support",
            "url": "https://aastar.xyz"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/account/v1/bind": {
            "post": {
                "description": "bind a account to community node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "parameters": [
                    {
                        "description": "Account Binding",
                        "name": "bind",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Bind"
                        }
                    },
                    {
                        "type": "string",
                        "description": "apiKey",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/account/v1/sign": {
            "post": {
                "description": "sign a account to community node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/account/v1/transfer": {
            "post": {
                "description": "transfer a TX",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "parameters": [
                    {
                        "description": "Transfer TX",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Transfer"
                        }
                    },
                    {
                        "type": "string",
                        "description": "apiKey",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/dashboard/v1/node": {
            "get": {
                "description": "get node members",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/healthz": {
            "get": {
                "description": "Get Healthz",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Healthz"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/reg": {
            "post": {
                "description": "Begin the registration process",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "sign up step2. begin registration",
                "parameters": [
                    {
                        "description": "Begin Registration",
                        "name": "registrationBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.Registration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/reg/prepare": {
            "post": {
                "description": "Send captcha to email for verifying belongs",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "sign up step1. send code",
                "parameters": [
                    {
                        "description": "Send Captcha to Email",
                        "name": "registrationBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.RegistrationPrepare"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/reg/verify": {
            "post": {
                "description": "Verify Passkey Registration",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "sign up step3. Finish Registration",
                "parameters": [
                    {
                        "description": "Verify Registration",
                        "name": "registrationBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.Registration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/passkey/v1/sign": {
            "post": {
                "description": "Begins the sign in process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "sign in step 1. request credential assertion",
                "parameters": [
                    {
                        "description": "Sign in details",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/seedworks.SiginIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/passkey/v1/sign/verify": {
            "post": {
                "description": "Finish the sign in process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins Passkey"
                ],
                "summary": "sign in step 2. verify credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Origin",
                        "name": "origin",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/v1/airaccount_rpc/{network}": {
            "post": {
                "description": "AirAccount JSON-RPC API",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "JsonRpcHandle"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Network",
                        "name": "network",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JsonRpcRequest Model",
                        "name": "rpcRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.JsonRpcRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "apiKey",
                        "name": "apiKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "pkg.JsonRpcRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "jsonrpc": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "request.Bind": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "request.Transfer": {
            "type": "object"
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/response.Result"
                }
            }
        },
        "response.Result": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "cost": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "seedworks.Network": {
            "type": "string",
            "enum": [
                "ethereum-mainnet",
                "ethereum-sepolia",
                "optimism-mainnet",
                "optimism-sepolia",
                "arbitrum-one",
                "arbitrum-nova",
                "arbitrum-sepolia",
                "scroll-mainnet",
                "scroll-sepolia",
                "starknet-mainnet",
                "starknet-sepolia",
                "base-mainnet",
                "base-sepolia"
            ],
            "x-enum-varnames": [
                "EthereumMainnet",
                "EthereumSepolia",
                "OptimismMainnet",
                "OptimismSepolia",
                "ArbitrumOne",
                "ArbitrumNova",
                "ArbitrumSpeolia",
                "ScrollMainnet",
                "ScrollSepolia",
                "StarketMainnet",
                "StarketSepolia",
                "BaseMainnet",
                "BaseSepolia"
            ]
        },
        "seedworks.Registration": {
            "type": "object",
            "properties": {
                "captcha": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "network": {
                    "$ref": "#/definitions/seedworks.Network"
                },
                "origin": {
                    "type": "string"
                }
            }
        },
        "seedworks.RegistrationPrepare": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "seedworks.SiginIn": {
            "type": "object",
            "properties": {
                "captcha": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "network": {
                    "$ref": "#/definitions/seedworks.Network"
                },
                "origin": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
